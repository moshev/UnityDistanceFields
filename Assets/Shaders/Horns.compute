#pragma kernel RaymarchMain
#pragma kernel DistanceMain
#define _DIST_FUNCTION _dist_xform_5
float _dist_xform_5(float3 p);
#include "RaymarchMainCompute.cginc"
StructuredBuffer<raycontext> _input;
RWStructuredBuffer<rayresult> _output;
[numthreads(128, 1, 1)]
void RaymarchMain(uint grpIdx : SV_GroupIndex)
{
    rayresult res;
    res = trace(_input[grpIdx]);
    _output[grpIdx] = res;
}
[numthreads(128, 1, 1)]
void DistanceMain(uint grpIdx : SV_GroupIndex)
{
    rayresult res;
    res.p = float3(0, 0, 0);
    res.n = float3(0, 0, 0);
    res.distance = distToObject(_input[grpIdx].p);
    _output[grpIdx] = res;
}
float3 _transform_1;

float _Radius_1;

float _dist_1(float3 p) {
	return length(p) - _Radius_1;
}

float _dist_xform_1(float3 p) {
    return _dist_1(p - _transform_1);
}
float3 _transform_2;

float _Radius_2;

float _dist_2(float3 p) {
	return length(p) - _Radius_2;
}

float _dist_xform_2(float3 p) {
    return _dist_2(p - _transform_2);
}
float3 _transform_3;

float _dist_3(float3 p) {
	return max(_dist_xform_1(p), _dist_xform_2(p));
}

float _dist_xform_3(float3 p) {
    return _dist_3(p - _transform_3);
}
float3 _transform_4;

float _OuterRadius_1;
float _InnerRadius_1;

float _dist_4(float3 p) {
    float z = p.y;
    float xy2 = dot(p, p);
    float b = _OuterRadius_1 - sqrt(xy2);
    return sqrt(b * b + z * z) - _InnerRadius_1;
}

float _dist_xform_4(float3 p) {
    return _dist_4(p - _transform_4);
}
float3 _transform_5;

float _Factor_1;

float _dist_5(float3 p) {
	float a = clamp(_Factor_1, 0.0, 1.0);
	return (1.0 - a) * _dist_xform_3(p) + a * _dist_xform_4(p);
}

float _dist_xform_5(float3 p) {
    return _dist_5(p - _transform_5);
}

