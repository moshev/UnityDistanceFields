#pragma kernel RaymarchMain
#pragma kernel DistanceMain
#define _DIST_FUNCTION _dist_xform_1
float _dist_xform_1(float3 p);
#include "RaymarchUtils.cginc"
#include "RaymarchMainCompute.cginc"
StructuredBuffer<raycontext> _input;
RWStructuredBuffer<rayresult> _output;
[numthreads(128, 1, 1)]
void RaymarchMain(uint3 dispatchId : SV_DispatchThreadID)
{
    uint arrId = dispatchId.x;
    rayresult res;
    res = trace(_input[arrId]);
    _output[arrId] = res;
}
[numthreads(128, 1, 1)]
void DistanceMain(uint3 dispatchId : SV_DispatchThreadID)
{
    uint arrId = dispatchId.x;
    rayresult res;
    res.p = float3(0, 0, 0);
    res.n = float3(0, 0, 0);
    res.distance = _DIST_FUNCTION(_input[arrId].p);
    _output[arrId] = res;
}
float3 _translation_1;
float4 _rotation_1;

float _Radius_1;

float _dist_1(float3 p) {
	return length(p) - _Radius_1;
}

float _dist_xform_1(float3 p) {
    return _dist_1(qrot(qinv(_rotation_1), p - _translation_1));
}

